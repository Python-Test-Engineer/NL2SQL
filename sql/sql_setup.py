#!/usr/bin/env python3
# Generated by Claude 3.7
import sqlite3
import os
from typing import List, Dict, Any, Optional, Union


class EarlDB:
    """A class for interacting with the Earl database."""

    def __init__(self, db_path: str = "earl.db"):
        """Initialize the database connection."""
        self.db_path = db_path
        self.connection = None
        self.cursor = None
        self.connect()

    def connect(self) -> None:
        """Connect to the database."""
        try:
            # Check if database file exists
            db_exists = os.path.exists(self.db_path)

            # Connect to the database
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row  # Return rows as dictionaries
            self.cursor = self.connection.cursor()

            if not db_exists:
                print(f"Created new database file: {self.db_path}")
            else:
                print(f"Connected to existing database: {self.db_path}")

        except sqlite3.Error as e:
            print(f"Database connection error: {e}")
            raise

    def execute_query(
        self, query: str, params: tuple = ()
    ) -> Optional[List[Dict[str, Any]]]:
        """Execute a SQL query and return the results."""
        try:
            self.cursor.execute(query, params)

            # Check if the query is a SELECT statement (or similar)
            if query.strip().upper().startswith(("SELECT", "PRAGMA", "EXPLAIN")):
                rows = self.cursor.fetchall()
                return [dict(row) for row in rows]
            else:
                self.connection.commit()
                return None

        except sqlite3.Error as e:
            print(f"Query execution error: {e}")
            print(f"Query: {query}")
            print(f"Parameters: {params}")
            self.connection.rollback()
            return None

    def execute_script(self, script: str) -> bool:
        """Execute a SQL script containing multiple statements."""
        try:
            self.cursor.executescript(script)
            self.connection.commit()
            return True
        except sqlite3.Error as e:
            print(f"Script execution error: {e}")
            self.connection.rollback()
            return False

    def get_tables(self) -> List[str]:
        """Get a list of all tables in the database."""
        result = self.execute_query("SELECT name FROM sqlite_master WHERE type='table'")
        return [row["name"] for row in result] if result else []

    def get_table_schema(self, table_name: str) -> Optional[str]:
        """Get the schema for a specific table."""
        try:
            result = self.execute_query(
                f"SELECT sql FROM sqlite_master WHERE type='table' AND name=?",
                (table_name,),
            )
            return result[0]["sql"] if result else None
        except sqlite3.Error:
            return None

    def close(self) -> None:
        """Close the database connection."""
        if self.connection:
            self.connection.close()
            print("Database connection closed.")


def example_usage():
    """Example usage of the EarlDB class."""
    db = EarlDB()

    # Get list of tables
    tables = db.get_tables()
    print(f"Tables in database: {', '.join(tables)}")

    # Print schema for each table
    for table in tables:
        schema = db.get_table_schema(table)
        print(f"\nSchema for {table}:")
        print(schema)

    # Example query: get all categories
    categories = db.execute_query("SELECT * FROM Category")
    if categories:
        print("\nCategories:")
        for category in categories:
            print(f"ID: {category['id']}, Name: {category['name']}")

    # Example query: get products with their categories
    products = db.execute_query(
        """
        SELECT p.id, p.name, p.price, c.name as category_name
        FROM Products p
        JOIN Category c ON p.category = c.id
        LIMIT 5
    """
    )
    if products:
        print("\nSample Products:")
        for product in products:
            print(
                f"ID: {product['id']}, Name: {product['name']}, "
                f"Price: ${product['price']}, Category: {product['category_name']}"
            )

    # Close connection
    db.close()


if __name__ == "__main__":
    # Create an instance of the database manager
    db = EarlDB()

    print(db.get_tables())

    # Print welcome message

    print("Earl Database Manager")
    print("Enter SQL commands to execute (type 'exit' to quit, 'help' for commands)")

    # Interactive command loop
    while True:
        command = input("\nSQL> ").strip()

        # Exit command
        if command.lower() in ("exit", "quit", "bye"):
            db.close()
            break

        # Help command
        elif command.lower() == "help":
            print("\nAvailable commands:")
            print("  tables            - List all tables")
            print("  schema <table>    - Show schema for a table")
            print("  sample <table>    - Show sample data from a table")
            print("  <sql statement>   - Execute any SQL statement")
            print("  exit              - Exit the program")

        # List tables command
        elif command.lower() == "tables":
            tables = db.get_tables()
            print(f"Tables: {', '.join(tables)}")

        # Show schema command
        elif command.lower().startswith("schema "):
            table_name = command[7:].strip()
            schema = db.get_table_schema(table_name)
            if schema:
                print(f"Schema for {table_name}:")
                print(schema)
            else:
                print(f"Table '{table_name}' not found.")

        # Show sample data command
        elif command.lower().startswith("sample "):
            table_name = command[7:].strip()
            rows = db.execute_query(f"SELECT * FROM {table_name} LIMIT 5")
            if rows:
                print(f"Sample data from {table_name}:")
                for row in rows:
                    print(dict(row))
            else:
                print(f"No data or table '{table_name}' not found.")

        # Execute SQL command
        else:
            try:
                result = db.execute_query(command)
                if result is not None:
                    print(f"Results ({len(result)} rows):")
                    for row in result:
                        print(dict(row))
                else:
                    print("Command executed successfully.")
            except Exception as e:
                print(f"Error: {e}")
